package telegram

import (
	"DobroBot/model"
	"DobroBot/store"
	"fmt"
	"log"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var mainMenuKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–û —Ñ–æ–Ω–¥–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"),
	),
)

type Telegram struct {
	s        store.Store
	wannaPay map[int64]struct{}
	ch       chan (model.Discont)
	//registration map[int]model.User
}

func NewTelegram(s store.Store, ch chan (model.Discont)) *Telegram {
	return &Telegram{
		s:  s,
		ch: ch,
	}
}

const textAbout = `	–§–æ–Ω–¥ –±–æ—Ä—å–±—ã —Å –¥–∏–∞–±–µ—Ç–æ–º ‚Äî –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
–ø–æ–º–æ—â–∏ –ª—é–¥—è–º —Å —Å–∞—Ö–∞—Ä–Ω—ã–º –¥–∏–∞–±–µ—Ç–æ–º.
	–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —Å —Å–∞—Ö–∞—Ä–Ω—ã–º –¥–∏–∞–±–µ—Ç–æ–º, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–≤–æ–µ–≥–æ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –∏–º–µ–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
 –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: +7 (980) 915-72-22 ( WhatsApp –∏–ª–∏ Telegram)
info@diabet-fond.ru
https://diabet-fond.ru/
—É–ª. –°–µ—á–µ–Ω–æ–≤–∞ 5, –ö–∞–∑–∞–Ω—å`

const Hello = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–§–æ–Ω–¥ –ë–æ—Ä—å–±—ã —Å –¥–∏–∞–±–µ—Ç–æ–º"!
üåü –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –≥–¥–µ –¥–æ–±—Ä–æ –∏ —Å–∫–∏–¥–∫–∏ –∏–¥—É—Ç —Ä—É–∫–∞ –æ–± —Ä—É–∫—É! üåü
ü§ù –ú—ã - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω–∏–ª–∞ —Å–∏–ª—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –±–æ—Ä–æ—Ç—å—Å—è —Å —Ä–µ–¥–∫–∏–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ —É –¥–µ—Ç–µ–π. –í–∞—à–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –º–æ—Å—Ç–æ–º –∫ –Ω–∞–¥–µ–∂–¥–µ –∏ –ª—É—á—à–µ–º—É –±—É–¥—É—â–µ–º—É –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–æ—Ä—Ü–æ–≤!
üéÅ –í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–∏—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö –≥–µ—Ä–æ–µ–≤, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Å–∫–∏–¥–∫–∞–º –æ—Ç –Ω–∞—à–∏—Ö –¥–æ–±—Ä—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è –≤–∞—à–∞ –ø–æ–º–æ—â—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑—É –Ω–µ —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º, –Ω–æ –∏ –≤–∞–º –ª–∏—á–Ω–æ!`

func (t *Telegram) Run(token string) {
	t.wannaPay = make(map[int64]struct{}, 10)
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}
	go t.checkForDisconts(bot)
	//t.registration = make(map[int]model.User, 10)

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		update.Message.IsCommand()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

		if _, ok := t.wannaPay[update.Message.From.ID]; ok {
			delete(t.wannaPay, update.Message.From.ID)

			count, err := strconv.Atoi(update.Message.Text)
			if err != nil {
				log.Printf("cant parse %v: %v", update.Message.Text, err)
				continue
			}

			// –∫–∞–∫–æ–π —Ç–æ —Å–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –Ω–∞–¥–æ —á—Ç–æ–ª–∏
			t.s.UpdateDontes(int(update.Message.From.ID), count)
			msg.Text = "https://www.tinkoff.ru/cf/93PoEEuzNTj\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ)"
		} else {
			user, err := t.s.Get(int(update.Message.From.ID))
			if err != nil {
				user = model.User{
					Id:       int(update.Message.From.ID),
					Username: update.Message.From.UserName,
				}
				t.s.Add(user)
			}
			switch update.Message.Text {
			case "/start":
				msg.Text = Hello
				msg.ReplyMarkup = mainMenuKeyboard

			case "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
				msg.Text = "–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å?"
				t.wannaPay[update.Message.From.ID] = struct{}{}
			case "–û —Ñ–æ–Ω–¥–µ":
				msg.Text = textAbout
			case "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
				sumDonate, err2 := t.s.Get(int(update.Message.From.ID))
				if err2 != nil {
					log.Fatalf("couldn't get the donation amount, %v", err)
				}

				msg.Text = fmt.Sprintf("–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: %s\n –¢–≤–æ—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: %d –µ–¥",
					t.heroLvl(sumDonate), sumDonate.Donations)
			default:
				msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."
			}
		}

		if _, err := bot.Send(msg); err != nil {
			log.Fatal(err)
		}
	}
}

func (t *Telegram) heroLvl(donate model.User) string {
	title := "–ò—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"
	if donate.Donations >= 5000 {
		title = "–ì–µ—Ä–æ–π –ò–º–ø–µ—Ä–∏–∏"
	} else if donate.Donations > 1000 {
		title = "–ì–µ—Ä–æ–π –ì–æ—Ä–æ–¥–∞"
	} else if donate.Donations >= 500 {
		title = "–ì–µ—Ä–æ–π –ö–≤–∞—Ä—Ç–∞–ª–∞"
	} else if donate.Donations > 100 {
		title = "–ò—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π"
	}
	return title
}

func (t *Telegram) checkForDisconts(bot *tgbotapi.BotAPI) {
	for val := range t.ch {
		result, _ := t.s.GetAllWithDonates(val.ForDonate)

		for _, v := range result {
			msg := tgbotapi.NewMessage(int64(v), val.Text)
			msg.ParseMode = "HTML"

			if _, err := bot.Send(msg); err != nil {
				log.Panic(err)
			}
		}
	}
}
